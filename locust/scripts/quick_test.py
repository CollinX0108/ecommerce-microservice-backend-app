#!/usr/bin/env python3
"""
Script para ejecutar una prueba r√°pida de demostraci√≥n del sistema de rendimiento
"""

import subprocess
import sys
import os
from datetime import datetime

def run_quick_test():
    """Ejecutar una prueba r√°pida de demostraci√≥n"""
    print("üöÄ PRUEBA R√ÅPIDA DE RENDIMIENTO - DEMOSTRACI√ìN")
    print("=" * 60)
    
    # Crear directorio de reportes si no existe
    reports_dir = "../reports"
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)
        print(f"üìÅ Directorio de reportes creado: {reports_dir}")
    
    # Configuraci√≥n de la prueba r√°pida
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"{reports_dir}/quick_test_{timestamp}"
    
    print(f"‚ö° Configuraci√≥n de prueba r√°pida:")
    print(f"   - Usuarios: 10")
    print(f"   - Spawn rate: 2 usuarios/segundo")
    print(f"   - Duraci√≥n: 30 segundos")
    print(f"   - Host: http://localhost:9081 (API Gateway)")
    print(f"   - Reporte: {report_file}.html")
    print()
    
    # Comando de Locust
    cmd = [
        "locust",
        "-f", "../test/ecommerce-complete/ecommerce_load_test.py",
        "--headless",
        "-u", "10",
        "-r", "2", 
        "--run-time", "30s",
        "--host", "http://localhost:9081",
        "--html", f"{report_file}.html",
        "--csv", report_file
    ]
    
    print("üîÑ Iniciando prueba...")
    print(f"üíª Comando: {' '.join(cmd)}")
    print()
    
    try:
        # Ejecutar la prueba
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        print("‚úÖ ¬°PRUEBA COMPLETADA EXITOSAMENTE!")
        print("=" * 60)
        print(f"üìä Reporte HTML generado: {report_file}.html")
        print(f"üìà Datos CSV generados: {report_file}_stats.csv")
        print()
        print("üéØ Para ver el reporte detallado, abre el archivo HTML en tu navegador")
        print()
        print("üìã Pr√≥ximos pasos:")
        print("   1. Revisar el reporte HTML para m√©tricas detalladas")
        print("   2. Ejecutar pruebas m√°s largas con m√°s usuarios")
        print("   3. Probar servicios espec√≠ficos individualmente")
        print()
        print("üöÄ Comandos de ejemplo para pruebas m√°s avanzadas:")
        print("   # Prueba normal del sistema completo")
        print("   python run_load_tests.py --type normal")
        print()
        print("   # Prueba espec√≠fica del servicio de productos")
        print("   python run_load_tests.py --service product-service")
        print()
        print("   # Prueba de estr√©s")
        print("   python run_load_tests.py --type stress")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print("‚ùå ERROR EJECUTANDO LA PRUEBA")
        print("=" * 60)
        print(f"C√≥digo de salida: {e.returncode}")
        print(f"Output: {e.stdout}")
        print(f"Error: {e.stderr}")
        print()
        print("üîç Posibles soluciones:")
        print("   1. Verificar que los microservicios est√©n ejecut√°ndose")
        print("   2. Comprobar que el API Gateway est√© en http://localhost:9081")
        print("   3. Instalar dependencias: pip install -r requirements.txt")
        print("   4. Verificar conectividad de red")
        
        return False
    
    except FileNotFoundError:
        print("‚ùå ERROR: Locust no est√° instalado")
        print("=" * 60)
        print("üîß Para instalar Locust:")
        print("   pip install locust")
        print("   # o")
        print("   pip install -r requirements.txt")
        
        return False

def check_services():
    """Verificar que los servicios est√©n ejecut√°ndose"""
    print("üîç Verificando servicios...")
    
    services = [
        ("API Gateway", "http://localhost:9081"),
        ("Product Service", "http://localhost:8081"),
        ("User Service", "http://localhost:8080"),
        ("Order Service", "http://localhost:8082"),
        ("Payment Service", "http://localhost:8083"),
        ("Favourite Service", "http://localhost:8085")
    ]
    
    try:
        import requests
        
        for service_name, url in services:
            try:
                response = requests.get(f"{url}/actuator/health", timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {service_name}: OK")
                else:
                    print(f"   ‚ö†Ô∏è {service_name}: Respuesta {response.status_code}")
            except requests.exceptions.RequestException:
                print(f"   ‚ùå {service_name}: No disponible")
        
        print()
        
    except ImportError:
        print("   ‚ö†Ô∏è M√≥dulo 'requests' no disponible para verificar servicios")
        print("   üí° Instalar con: pip install requests")
        print()

if __name__ == "__main__":
    print("üéØ SISTEMA DE PRUEBAS DE RENDIMIENTO")
    print("   Prueba r√°pida de demostraci√≥n")
    print()
    
    # Verificar servicios (opcional)
    check_services()
    
    # Ejecutar prueba r√°pida
    success = run_quick_test()
    
    if success:
        print("\nüéâ ¬°Prueba de demostraci√≥n completada exitosamente!")
        sys.exit(0)
    else:
        print("\nüí• La prueba de demostraci√≥n fall√≥")
        sys.exit(1) 